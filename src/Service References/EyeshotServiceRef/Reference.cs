//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EyeshotWcfClientWinForms.EyeshotServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadRequest", Namespace="http://schemas.datacontract.org/2004/07/EyeshotWcfService")]
    [System.SerializableAttribute()]
    public partial class UploadRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BufferField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OffsetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Buffer {
            get {
                return this.BufferField;
            }
            set {
                if ((object.ReferenceEquals(this.BufferField, value) != true)) {
                    this.BufferField = value;
                    this.RaisePropertyChanged("Buffer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Offset {
            get {
                return this.OffsetField;
            }
            set {
                if ((this.OffsetField.Equals(value) != true)) {
                    this.OffsetField = value;
                    this.RaisePropertyChanged("Offset");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DownloadResponse", Namespace="http://schemas.datacontract.org/2004/07/EyeshotWcfService")]
    [System.SerializableAttribute()]
    public partial class DownloadResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BufferField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EyeshotWcfClientWinForms.EyeshotServiceRef.FileType FileTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EyeshotWcfClientWinForms.EyeshotServiceRef.OperationsType OperationTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Buffer {
            get {
                return this.BufferField;
            }
            set {
                if ((object.ReferenceEquals(this.BufferField, value) != true)) {
                    this.BufferField = value;
                    this.RaisePropertyChanged("Buffer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EyeshotWcfClientWinForms.EyeshotServiceRef.FileType FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((this.FileTypeField.Equals(value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Log {
            get {
                return this.LogField;
            }
            set {
                if ((object.ReferenceEquals(this.LogField, value) != true)) {
                    this.LogField = value;
                    this.RaisePropertyChanged("Log");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EyeshotWcfClientWinForms.EyeshotServiceRef.OperationsType OperationType {
            get {
                return this.OperationTypeField;
            }
            set {
                if ((this.OperationTypeField.Equals(value) != true)) {
                    this.OperationTypeField = value;
                    this.RaisePropertyChanged("OperationType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileType", Namespace="http://schemas.datacontract.org/2004/07/EyeshotWcfService")]
    public enum FileType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xml = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Txt = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Image = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Html = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dwg = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dxf = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Iges = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Obj = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mtl = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Step = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stl = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pdf3D = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ifc = 13,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationsType", Namespace="http://schemas.datacontract.org/2004/07/EyeshotWcfService.Tasks")]
    public enum OperationsType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetFullOperationsLog = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToDwg = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToDxf = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToIges = 103,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToObj = 104,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToStep = 105,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToStl = 106,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToImage = 107,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToXml = 108,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertToWebGL = 109,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertTo3DPdf = 110,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetArea = 201,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetVolume = 202,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="viewType", Namespace="http://schemas.datacontract.org/2004/07/devDept.Eyeshot")]
    public enum viewType : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Front = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Right = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rear = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Left = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Top = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bottom = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Isometric = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dimetric = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Trimetric = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcFrontFaceBottom = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcFrontFaceRight = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcFrontFaceTop = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcFrontFaceLeft = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcRightFaceBottom = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcRightFaceRight = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcRightFaceTop = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcRightFaceLeft = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBackFaceBottom = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBackFaceRight = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBackFaceTop = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBackFaceLeft = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcLeftFaceBottom = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcLeftFaceRight = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcLeftFaceTop = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcLeftFaceLeft = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBottomFaceBottom = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBottomFaceRight = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBottomFaceTop = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBottomFaceLeft = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcTopFaceBottom = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcTopFaceRight = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcTopFaceTop = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcTopFaceLeft = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcFrontFaceBottomLeft = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcFrontFaceBottomRight = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcFrontFaceTopLeft = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcFrontFaceTopRight = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBackFaceBottomLeft = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBackFaceBottomRight = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBackFaceTopLeft = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        vcBackFaceTopRight = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Other = 41,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WriteAutodesk.versionType", Namespace="http://schemas.datacontract.org/2004/07/devDept.Eyeshot.Translators")]
    public enum WriteAutodeskversionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Release12 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Release13 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Release14 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Acad2000 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Acad2004 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Acad2007 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Acad2010 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Acad2013 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Acad2018 = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransformationsType", Namespace="http://schemas.datacontract.org/2004/07/EyeshotWcfService.Tasks")]
    public enum TransformationsType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rotate = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Translate = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scale = 30,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EyeshotServiceRef.IEyeshot", CallbackContract=typeof(EyeshotWcfClientWinForms.EyeshotServiceRef.IEyeshotCallback))]
    public interface IEyeshot {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/Connect", ReplyAction="http://tempuri.org/IEyeshot/ConnectResponse")]
        int Connect(string accessKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/Connect", ReplyAction="http://tempuri.org/IEyeshot/ConnectResponse")]
        System.IAsyncResult BeginConnect(string accessKey, System.AsyncCallback callback, object asyncState);
        
        int EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/UpdateReadingSettings", ReplyAction="http://tempuri.org/IEyeshot/UpdateReadingSettingsResponse")]
        string UpdateReadingSettings(bool autodeskSkipHatches, bool autodeskSkipProxies, bool stepIncludeWires);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/UpdateReadingSettings", ReplyAction="http://tempuri.org/IEyeshot/UpdateReadingSettingsResponse")]
        System.IAsyncResult BeginUpdateReadingSettings(bool autodeskSkipHatches, bool autodeskSkipProxies, bool stepIncludeWires, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateReadingSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/UploadData", ReplyAction="http://tempuri.org/IEyeshot/UploadDataResponse")]
        string UploadData(EyeshotWcfClientWinForms.EyeshotServiceRef.UploadRequest uploadRequest);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/UploadData", ReplyAction="http://tempuri.org/IEyeshot/UploadDataResponse")]
        System.IAsyncResult BeginUploadData(EyeshotWcfClientWinForms.EyeshotServiceRef.UploadRequest uploadRequest, System.AsyncCallback callback, object asyncState);
        
        string EndUploadData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/UploadDataDone", ReplyAction="http://tempuri.org/IEyeshot/UploadDataDoneResponse")]
        string UploadDataDone();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/UploadDataDone", ReplyAction="http://tempuri.org/IEyeshot/UploadDataDoneResponse")]
        System.IAsyncResult BeginUploadDataDone(System.AsyncCallback callback, object asyncState);
        
        string EndUploadDataDone(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/Disconnect", ReplyAction="http://tempuri.org/IEyeshot/DisconnectResponse")]
        string Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/Disconnect", ReplyAction="http://tempuri.org/IEyeshot/DisconnectResponse")]
        System.IAsyncResult BeginDisconnect(System.AsyncCallback callback, object asyncState);
        
        string EndDisconnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/DownloadData", ReplyAction="http://tempuri.org/IEyeshot/DownloadDataResponse")]
        EyeshotWcfClientWinForms.EyeshotServiceRef.DownloadResponse DownloadData(int offset, int bufferSize);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/DownloadData", ReplyAction="http://tempuri.org/IEyeshot/DownloadDataResponse")]
        System.IAsyncResult BeginDownloadData(int offset, int bufferSize, System.AsyncCallback callback, object asyncState);
        
        EyeshotWcfClientWinForms.EyeshotServiceRef.DownloadResponse EndDownloadData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/DownloadDataDone", ReplyAction="http://tempuri.org/IEyeshot/DownloadDataDoneResponse")]
        string DownloadDataDone();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/DownloadDataDone", ReplyAction="http://tempuri.org/IEyeshot/DownloadDataDoneResponse")]
        System.IAsyncResult BeginDownloadDataDone(System.AsyncCallback callback, object asyncState);
        
        string EndDownloadDataDone(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ExecuteJob", ReplyAction="http://tempuri.org/IEyeshot/ExecuteJobResponse")]
        string ExecuteJob();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ExecuteJob", ReplyAction="http://tempuri.org/IEyeshot/ExecuteJobResponse")]
        System.IAsyncResult BeginExecuteJob(System.AsyncCallback callback, object asyncState);
        
        string EndExecuteJob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ClearJob", ReplyAction="http://tempuri.org/IEyeshot/ClearJobResponse")]
        string ClearJob();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ClearJob", ReplyAction="http://tempuri.org/IEyeshot/ClearJobResponse")]
        System.IAsyncResult BeginClearJob(System.AsyncCallback callback, object asyncState);
        
        string EndClearJob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToImages", ReplyAction="http://tempuri.org/IEyeshot/ConvertToImagesResponse")]
        string ConvertToImages(EyeshotWcfClientWinForms.EyeshotServiceRef.viewType[] views, int width, int height, System.Drawing.Color topColor, System.Drawing.Color bottomColor, bool showCsi, bool showOs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToImages", ReplyAction="http://tempuri.org/IEyeshot/ConvertToImagesResponse")]
        System.IAsyncResult BeginConvertToImages(EyeshotWcfClientWinForms.EyeshotServiceRef.viewType[] views, int width, int height, System.Drawing.Color topColor, System.Drawing.Color bottomColor, bool showCsi, bool showOs, System.AsyncCallback callback, object asyncState);
        
        string EndConvertToImages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToXml", ReplyAction="http://tempuri.org/IEyeshot/ConvertToXmlResponse")]
        string ConvertToXml();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToXml", ReplyAction="http://tempuri.org/IEyeshot/ConvertToXmlResponse")]
        System.IAsyncResult BeginConvertToXml(System.AsyncCallback callback, object asyncState);
        
        string EndConvertToXml(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToWebGL", ReplyAction="http://tempuri.org/IEyeshot/ConvertToWebGLResponse")]
        string ConvertToWebGL(double tolerance, System.Nullable<System.Drawing.Color> htmlBodyColor);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToWebGL", ReplyAction="http://tempuri.org/IEyeshot/ConvertToWebGLResponse")]
        System.IAsyncResult BeginConvertToWebGL(double tolerance, System.Nullable<System.Drawing.Color> htmlBodyColor, System.AsyncCallback callback, object asyncState);
        
        string EndConvertToWebGL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToDwg", ReplyAction="http://tempuri.org/IEyeshot/ConvertToDwgResponse")]
        string ConvertToDwg(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToDwg", ReplyAction="http://tempuri.org/IEyeshot/ConvertToDwgResponse")]
        System.IAsyncResult BeginConvertToDwg(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance, System.AsyncCallback callback, object asyncState);
        
        string EndConvertToDwg(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToDxf", ReplyAction="http://tempuri.org/IEyeshot/ConvertToDxfResponse")]
        string ConvertToDxf(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToDxf", ReplyAction="http://tempuri.org/IEyeshot/ConvertToDxfResponse")]
        System.IAsyncResult BeginConvertToDxf(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance, System.AsyncCallback callback, object asyncState);
        
        string EndConvertToDxf(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertTo3DPdf", ReplyAction="http://tempuri.org/IEyeshot/ConvertTo3DPdfResponse")]
        string ConvertTo3DPdf();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertTo3DPdf", ReplyAction="http://tempuri.org/IEyeshot/ConvertTo3DPdfResponse")]
        System.IAsyncResult BeginConvertTo3DPdf(System.AsyncCallback callback, object asyncState);
        
        string EndConvertTo3DPdf(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToObj", ReplyAction="http://tempuri.org/IEyeshot/ConvertToObjResponse")]
        string ConvertToObj(double tolerance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToObj", ReplyAction="http://tempuri.org/IEyeshot/ConvertToObjResponse")]
        System.IAsyncResult BeginConvertToObj(double tolerance, System.AsyncCallback callback, object asyncState);
        
        string EndConvertToObj(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToIges", ReplyAction="http://tempuri.org/IEyeshot/ConvertToIgesResponse")]
        string ConvertToIges();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToIges", ReplyAction="http://tempuri.org/IEyeshot/ConvertToIgesResponse")]
        System.IAsyncResult BeginConvertToIges(System.AsyncCallback callback, object asyncState);
        
        string EndConvertToIges(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToStep", ReplyAction="http://tempuri.org/IEyeshot/ConvertToStepResponse")]
        string ConvertToStep();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToStep", ReplyAction="http://tempuri.org/IEyeshot/ConvertToStepResponse")]
        System.IAsyncResult BeginConvertToStep(System.AsyncCallback callback, object asyncState);
        
        string EndConvertToStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/ConvertToStl", ReplyAction="http://tempuri.org/IEyeshot/ConvertToStlResponse")]
        string ConvertToStl(double tolerance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/ConvertToStl", ReplyAction="http://tempuri.org/IEyeshot/ConvertToStlResponse")]
        System.IAsyncResult BeginConvertToStl(double tolerance, System.AsyncCallback callback, object asyncState);
        
        string EndConvertToStl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/GetArea", ReplyAction="http://tempuri.org/IEyeshot/GetAreaResponse")]
        string GetArea(double tolerance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/GetArea", ReplyAction="http://tempuri.org/IEyeshot/GetAreaResponse")]
        System.IAsyncResult BeginGetArea(double tolerance, System.AsyncCallback callback, object asyncState);
        
        string EndGetArea(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/GetVolume", ReplyAction="http://tempuri.org/IEyeshot/GetVolumeResponse")]
        string GetVolume(double tolerance);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/GetVolume", ReplyAction="http://tempuri.org/IEyeshot/GetVolumeResponse")]
        System.IAsyncResult BeginGetVolume(double tolerance, System.AsyncCallback callback, object asyncState);
        
        string EndGetVolume(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/GetFullOperationsLog", ReplyAction="http://tempuri.org/IEyeshot/GetFullOperationsLogResponse")]
        string GetFullOperationsLog();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/GetFullOperationsLog", ReplyAction="http://tempuri.org/IEyeshot/GetFullOperationsLogResponse")]
        System.IAsyncResult BeginGetFullOperationsLog(System.AsyncCallback callback, object asyncState);
        
        string EndGetFullOperationsLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/AddRotation", ReplyAction="http://tempuri.org/IEyeshot/AddRotationResponse")]
        string AddRotation(double angleInRadians, double vectorX, double vectorY, double vectorZ, double centerX, double centerY, double centerZ);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/AddRotation", ReplyAction="http://tempuri.org/IEyeshot/AddRotationResponse")]
        System.IAsyncResult BeginAddRotation(double angleInRadians, double vectorX, double vectorY, double vectorZ, double centerX, double centerY, double centerZ, System.AsyncCallback callback, object asyncState);
        
        string EndAddRotation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/AddTranslation", ReplyAction="http://tempuri.org/IEyeshot/AddTranslationResponse")]
        string AddTranslation(double x, double y, double z);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/AddTranslation", ReplyAction="http://tempuri.org/IEyeshot/AddTranslationResponse")]
        System.IAsyncResult BeginAddTranslation(double x, double y, double z, System.AsyncCallback callback, object asyncState);
        
        string EndAddTranslation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEyeshot/AddScaling", ReplyAction="http://tempuri.org/IEyeshot/AddScalingResponse")]
        string AddScaling(double x, double y, double z);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEyeshot/AddScaling", ReplyAction="http://tempuri.org/IEyeshot/AddScalingResponse")]
        System.IAsyncResult BeginAddScaling(double x, double y, double z, System.AsyncCallback callback, object asyncState);
        
        string EndAddScaling(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEyeshotCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEyeshot/OnProgressChanged")]
        void OnProgressChanged(string msg, int percent);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IEyeshot/OnProgressChanged")]
        System.IAsyncResult BeginOnProgressChanged(string msg, int percent, System.AsyncCallback callback, object asyncState);
        
        void EndOnProgressChanged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEyeshot/OnOperationCompleted")]
        void OnOperationCompleted(EyeshotWcfClientWinForms.EyeshotServiceRef.OperationsType operationType, int resultsCount, string log, bool skipped);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IEyeshot/OnOperationCompleted")]
        System.IAsyncResult BeginOnOperationCompleted(EyeshotWcfClientWinForms.EyeshotServiceRef.OperationsType operationType, int resultsCount, string log, bool skipped, System.AsyncCallback callback, object asyncState);
        
        void EndOnOperationCompleted(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEyeshot/OnTransformationCompleted")]
        void OnTransformationCompleted(EyeshotWcfClientWinForms.EyeshotServiceRef.TransformationsType transformationType, string log, bool skipped);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IEyeshot/OnTransformationCompleted")]
        System.IAsyncResult BeginOnTransformationCompleted(EyeshotWcfClientWinForms.EyeshotServiceRef.TransformationsType transformationType, string log, bool skipped, System.AsyncCallback callback, object asyncState);
        
        void EndOnTransformationCompleted(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEyeshotChannel : EyeshotWcfClientWinForms.EyeshotServiceRef.IEyeshot, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateReadingSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateReadingSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadDataDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadDataDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EyeshotWcfClientWinForms.EyeshotServiceRef.DownloadResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EyeshotWcfClientWinForms.EyeshotServiceRef.DownloadResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadDataDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadDataDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToWebGLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToWebGLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToDwgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToDwgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToDxfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToDxfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertTo3DPdfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertTo3DPdfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToObjCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToObjCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToIgesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToIgesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertToStlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertToStlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVolumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVolumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFullOperationsLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFullOperationsLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddRotationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddRotationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTranslationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTranslationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddScalingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddScalingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EyeshotClient : System.ServiceModel.DuplexClientBase<EyeshotWcfClientWinForms.EyeshotServiceRef.IEyeshot>, EyeshotWcfClientWinForms.EyeshotServiceRef.IEyeshot {
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateReadingSettingsDelegate;
        
        private EndOperationDelegate onEndUpdateReadingSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateReadingSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadDataDelegate;
        
        private EndOperationDelegate onEndUploadDataDelegate;
        
        private System.Threading.SendOrPostCallback onUploadDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadDataDoneDelegate;
        
        private EndOperationDelegate onEndUploadDataDoneDelegate;
        
        private System.Threading.SendOrPostCallback onUploadDataDoneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectDelegate;
        
        private EndOperationDelegate onEndDisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadDataDelegate;
        
        private EndOperationDelegate onEndDownloadDataDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadDataDoneDelegate;
        
        private EndOperationDelegate onEndDownloadDataDoneDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadDataDoneCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteJobDelegate;
        
        private EndOperationDelegate onEndExecuteJobDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteJobCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearJobDelegate;
        
        private EndOperationDelegate onEndClearJobDelegate;
        
        private System.Threading.SendOrPostCallback onClearJobCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToImagesDelegate;
        
        private EndOperationDelegate onEndConvertToImagesDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToImagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToXmlDelegate;
        
        private EndOperationDelegate onEndConvertToXmlDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToXmlCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToWebGLDelegate;
        
        private EndOperationDelegate onEndConvertToWebGLDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToWebGLCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToDwgDelegate;
        
        private EndOperationDelegate onEndConvertToDwgDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToDwgCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToDxfDelegate;
        
        private EndOperationDelegate onEndConvertToDxfDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToDxfCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertTo3DPdfDelegate;
        
        private EndOperationDelegate onEndConvertTo3DPdfDelegate;
        
        private System.Threading.SendOrPostCallback onConvertTo3DPdfCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToObjDelegate;
        
        private EndOperationDelegate onEndConvertToObjDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToObjCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToIgesDelegate;
        
        private EndOperationDelegate onEndConvertToIgesDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToIgesCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToStepDelegate;
        
        private EndOperationDelegate onEndConvertToStepDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertToStlDelegate;
        
        private EndOperationDelegate onEndConvertToStlDelegate;
        
        private System.Threading.SendOrPostCallback onConvertToStlCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAreaDelegate;
        
        private EndOperationDelegate onEndGetAreaDelegate;
        
        private System.Threading.SendOrPostCallback onGetAreaCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVolumeDelegate;
        
        private EndOperationDelegate onEndGetVolumeDelegate;
        
        private System.Threading.SendOrPostCallback onGetVolumeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFullOperationsLogDelegate;
        
        private EndOperationDelegate onEndGetFullOperationsLogDelegate;
        
        private System.Threading.SendOrPostCallback onGetFullOperationsLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRotationDelegate;
        
        private EndOperationDelegate onEndAddRotationDelegate;
        
        private System.Threading.SendOrPostCallback onAddRotationCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTranslationDelegate;
        
        private EndOperationDelegate onEndAddTranslationDelegate;
        
        private System.Threading.SendOrPostCallback onAddTranslationCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddScalingDelegate;
        
        private EndOperationDelegate onEndAddScalingDelegate;
        
        private System.Threading.SendOrPostCallback onAddScalingCompletedDelegate;
        
        public EyeshotClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public EyeshotClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public EyeshotClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EyeshotClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EyeshotClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<ConnectCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<UpdateReadingSettingsCompletedEventArgs> UpdateReadingSettingsCompleted;
        
        public event System.EventHandler<UploadDataCompletedEventArgs> UploadDataCompleted;
        
        public event System.EventHandler<UploadDataDoneCompletedEventArgs> UploadDataDoneCompleted;
        
        public event System.EventHandler<DisconnectCompletedEventArgs> DisconnectCompleted;
        
        public event System.EventHandler<DownloadDataCompletedEventArgs> DownloadDataCompleted;
        
        public event System.EventHandler<DownloadDataDoneCompletedEventArgs> DownloadDataDoneCompleted;
        
        public event System.EventHandler<ExecuteJobCompletedEventArgs> ExecuteJobCompleted;
        
        public event System.EventHandler<ClearJobCompletedEventArgs> ClearJobCompleted;
        
        public event System.EventHandler<ConvertToImagesCompletedEventArgs> ConvertToImagesCompleted;
        
        public event System.EventHandler<ConvertToXmlCompletedEventArgs> ConvertToXmlCompleted;
        
        public event System.EventHandler<ConvertToWebGLCompletedEventArgs> ConvertToWebGLCompleted;
        
        public event System.EventHandler<ConvertToDwgCompletedEventArgs> ConvertToDwgCompleted;
        
        public event System.EventHandler<ConvertToDxfCompletedEventArgs> ConvertToDxfCompleted;
        
        public event System.EventHandler<ConvertTo3DPdfCompletedEventArgs> ConvertTo3DPdfCompleted;
        
        public event System.EventHandler<ConvertToObjCompletedEventArgs> ConvertToObjCompleted;
        
        public event System.EventHandler<ConvertToIgesCompletedEventArgs> ConvertToIgesCompleted;
        
        public event System.EventHandler<ConvertToStepCompletedEventArgs> ConvertToStepCompleted;
        
        public event System.EventHandler<ConvertToStlCompletedEventArgs> ConvertToStlCompleted;
        
        public event System.EventHandler<GetAreaCompletedEventArgs> GetAreaCompleted;
        
        public event System.EventHandler<GetVolumeCompletedEventArgs> GetVolumeCompleted;
        
        public event System.EventHandler<GetFullOperationsLogCompletedEventArgs> GetFullOperationsLogCompleted;
        
        public event System.EventHandler<AddRotationCompletedEventArgs> AddRotationCompleted;
        
        public event System.EventHandler<AddTranslationCompletedEventArgs> AddTranslationCompleted;
        
        public event System.EventHandler<AddScalingCompletedEventArgs> AddScalingCompleted;
        
        public int Connect(string accessKey) {
            return base.Channel.Connect(accessKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnect(string accessKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(accessKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndConnect(System.IAsyncResult result) {
            return base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessKey = ((string)(inValues[0]));
            return this.BeginConnect(accessKey, callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            int retVal = this.EndConnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new ConnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync(string accessKey) {
            this.ConnectAsync(accessKey, null);
        }
        
        public void ConnectAsync(string accessKey, object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, new object[] {
                        accessKey}, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        public string UpdateReadingSettings(bool autodeskSkipHatches, bool autodeskSkipProxies, bool stepIncludeWires) {
            return base.Channel.UpdateReadingSettings(autodeskSkipHatches, autodeskSkipProxies, stepIncludeWires);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateReadingSettings(bool autodeskSkipHatches, bool autodeskSkipProxies, bool stepIncludeWires, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateReadingSettings(autodeskSkipHatches, autodeskSkipProxies, stepIncludeWires, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndUpdateReadingSettings(System.IAsyncResult result) {
            return base.Channel.EndUpdateReadingSettings(result);
        }
        
        private System.IAsyncResult OnBeginUpdateReadingSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool autodeskSkipHatches = ((bool)(inValues[0]));
            bool autodeskSkipProxies = ((bool)(inValues[1]));
            bool stepIncludeWires = ((bool)(inValues[2]));
            return this.BeginUpdateReadingSettings(autodeskSkipHatches, autodeskSkipProxies, stepIncludeWires, callback, asyncState);
        }
        
        private object[] OnEndUpdateReadingSettings(System.IAsyncResult result) {
            string retVal = this.EndUpdateReadingSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateReadingSettingsCompleted(object state) {
            if ((this.UpdateReadingSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateReadingSettingsCompleted(this, new UpdateReadingSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateReadingSettingsAsync(bool autodeskSkipHatches, bool autodeskSkipProxies, bool stepIncludeWires) {
            this.UpdateReadingSettingsAsync(autodeskSkipHatches, autodeskSkipProxies, stepIncludeWires, null);
        }
        
        public void UpdateReadingSettingsAsync(bool autodeskSkipHatches, bool autodeskSkipProxies, bool stepIncludeWires, object userState) {
            if ((this.onBeginUpdateReadingSettingsDelegate == null)) {
                this.onBeginUpdateReadingSettingsDelegate = new BeginOperationDelegate(this.OnBeginUpdateReadingSettings);
            }
            if ((this.onEndUpdateReadingSettingsDelegate == null)) {
                this.onEndUpdateReadingSettingsDelegate = new EndOperationDelegate(this.OnEndUpdateReadingSettings);
            }
            if ((this.onUpdateReadingSettingsCompletedDelegate == null)) {
                this.onUpdateReadingSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateReadingSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateReadingSettingsDelegate, new object[] {
                        autodeskSkipHatches,
                        autodeskSkipProxies,
                        stepIncludeWires}, this.onEndUpdateReadingSettingsDelegate, this.onUpdateReadingSettingsCompletedDelegate, userState);
        }
        
        public string UploadData(EyeshotWcfClientWinForms.EyeshotServiceRef.UploadRequest uploadRequest) {
            return base.Channel.UploadData(uploadRequest);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadData(EyeshotWcfClientWinForms.EyeshotServiceRef.UploadRequest uploadRequest, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadData(uploadRequest, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndUploadData(System.IAsyncResult result) {
            return base.Channel.EndUploadData(result);
        }
        
        private System.IAsyncResult OnBeginUploadData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EyeshotWcfClientWinForms.EyeshotServiceRef.UploadRequest uploadRequest = ((EyeshotWcfClientWinForms.EyeshotServiceRef.UploadRequest)(inValues[0]));
            return this.BeginUploadData(uploadRequest, callback, asyncState);
        }
        
        private object[] OnEndUploadData(System.IAsyncResult result) {
            string retVal = this.EndUploadData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadDataCompleted(object state) {
            if ((this.UploadDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadDataCompleted(this, new UploadDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadDataAsync(EyeshotWcfClientWinForms.EyeshotServiceRef.UploadRequest uploadRequest) {
            this.UploadDataAsync(uploadRequest, null);
        }
        
        public void UploadDataAsync(EyeshotWcfClientWinForms.EyeshotServiceRef.UploadRequest uploadRequest, object userState) {
            if ((this.onBeginUploadDataDelegate == null)) {
                this.onBeginUploadDataDelegate = new BeginOperationDelegate(this.OnBeginUploadData);
            }
            if ((this.onEndUploadDataDelegate == null)) {
                this.onEndUploadDataDelegate = new EndOperationDelegate(this.OnEndUploadData);
            }
            if ((this.onUploadDataCompletedDelegate == null)) {
                this.onUploadDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadDataCompleted);
            }
            base.InvokeAsync(this.onBeginUploadDataDelegate, new object[] {
                        uploadRequest}, this.onEndUploadDataDelegate, this.onUploadDataCompletedDelegate, userState);
        }
        
        public string UploadDataDone() {
            return base.Channel.UploadDataDone();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadDataDone(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadDataDone(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndUploadDataDone(System.IAsyncResult result) {
            return base.Channel.EndUploadDataDone(result);
        }
        
        private System.IAsyncResult OnBeginUploadDataDone(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUploadDataDone(callback, asyncState);
        }
        
        private object[] OnEndUploadDataDone(System.IAsyncResult result) {
            string retVal = this.EndUploadDataDone(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadDataDoneCompleted(object state) {
            if ((this.UploadDataDoneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadDataDoneCompleted(this, new UploadDataDoneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadDataDoneAsync() {
            this.UploadDataDoneAsync(null);
        }
        
        public void UploadDataDoneAsync(object userState) {
            if ((this.onBeginUploadDataDoneDelegate == null)) {
                this.onBeginUploadDataDoneDelegate = new BeginOperationDelegate(this.OnBeginUploadDataDone);
            }
            if ((this.onEndUploadDataDoneDelegate == null)) {
                this.onEndUploadDataDoneDelegate = new EndOperationDelegate(this.OnEndUploadDataDone);
            }
            if ((this.onUploadDataDoneCompletedDelegate == null)) {
                this.onUploadDataDoneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadDataDoneCompleted);
            }
            base.InvokeAsync(this.onBeginUploadDataDoneDelegate, null, this.onEndUploadDataDoneDelegate, this.onUploadDataDoneCompletedDelegate, userState);
        }
        
        public string Disconnect() {
            return base.Channel.Disconnect();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisconnect(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnect(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndDisconnect(System.IAsyncResult result) {
            return base.Channel.EndDisconnect(result);
        }
        
        private System.IAsyncResult OnBeginDisconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDisconnect(callback, asyncState);
        }
        
        private object[] OnEndDisconnect(System.IAsyncResult result) {
            string retVal = this.EndDisconnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisconnectCompleted(object state) {
            if ((this.DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectCompleted(this, new DisconnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectAsync() {
            this.DisconnectAsync(null);
        }
        
        public void DisconnectAsync(object userState) {
            if ((this.onBeginDisconnectDelegate == null)) {
                this.onBeginDisconnectDelegate = new BeginOperationDelegate(this.OnBeginDisconnect);
            }
            if ((this.onEndDisconnectDelegate == null)) {
                this.onEndDisconnectDelegate = new EndOperationDelegate(this.OnEndDisconnect);
            }
            if ((this.onDisconnectCompletedDelegate == null)) {
                this.onDisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectDelegate, null, this.onEndDisconnectDelegate, this.onDisconnectCompletedDelegate, userState);
        }
        
        public EyeshotWcfClientWinForms.EyeshotServiceRef.DownloadResponse DownloadData(int offset, int bufferSize) {
            return base.Channel.DownloadData(offset, bufferSize);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadData(int offset, int bufferSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadData(offset, bufferSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EyeshotWcfClientWinForms.EyeshotServiceRef.DownloadResponse EndDownloadData(System.IAsyncResult result) {
            return base.Channel.EndDownloadData(result);
        }
        
        private System.IAsyncResult OnBeginDownloadData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int offset = ((int)(inValues[0]));
            int bufferSize = ((int)(inValues[1]));
            return this.BeginDownloadData(offset, bufferSize, callback, asyncState);
        }
        
        private object[] OnEndDownloadData(System.IAsyncResult result) {
            EyeshotWcfClientWinForms.EyeshotServiceRef.DownloadResponse retVal = this.EndDownloadData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadDataCompleted(object state) {
            if ((this.DownloadDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadDataCompleted(this, new DownloadDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadDataAsync(int offset, int bufferSize) {
            this.DownloadDataAsync(offset, bufferSize, null);
        }
        
        public void DownloadDataAsync(int offset, int bufferSize, object userState) {
            if ((this.onBeginDownloadDataDelegate == null)) {
                this.onBeginDownloadDataDelegate = new BeginOperationDelegate(this.OnBeginDownloadData);
            }
            if ((this.onEndDownloadDataDelegate == null)) {
                this.onEndDownloadDataDelegate = new EndOperationDelegate(this.OnEndDownloadData);
            }
            if ((this.onDownloadDataCompletedDelegate == null)) {
                this.onDownloadDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadDataCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadDataDelegate, new object[] {
                        offset,
                        bufferSize}, this.onEndDownloadDataDelegate, this.onDownloadDataCompletedDelegate, userState);
        }
        
        public string DownloadDataDone() {
            return base.Channel.DownloadDataDone();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadDataDone(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadDataDone(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndDownloadDataDone(System.IAsyncResult result) {
            return base.Channel.EndDownloadDataDone(result);
        }
        
        private System.IAsyncResult OnBeginDownloadDataDone(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDownloadDataDone(callback, asyncState);
        }
        
        private object[] OnEndDownloadDataDone(System.IAsyncResult result) {
            string retVal = this.EndDownloadDataDone(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadDataDoneCompleted(object state) {
            if ((this.DownloadDataDoneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadDataDoneCompleted(this, new DownloadDataDoneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadDataDoneAsync() {
            this.DownloadDataDoneAsync(null);
        }
        
        public void DownloadDataDoneAsync(object userState) {
            if ((this.onBeginDownloadDataDoneDelegate == null)) {
                this.onBeginDownloadDataDoneDelegate = new BeginOperationDelegate(this.OnBeginDownloadDataDone);
            }
            if ((this.onEndDownloadDataDoneDelegate == null)) {
                this.onEndDownloadDataDoneDelegate = new EndOperationDelegate(this.OnEndDownloadDataDone);
            }
            if ((this.onDownloadDataDoneCompletedDelegate == null)) {
                this.onDownloadDataDoneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadDataDoneCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadDataDoneDelegate, null, this.onEndDownloadDataDoneDelegate, this.onDownloadDataDoneCompletedDelegate, userState);
        }
        
        public string ExecuteJob() {
            return base.Channel.ExecuteJob();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteJob(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteJob(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndExecuteJob(System.IAsyncResult result) {
            return base.Channel.EndExecuteJob(result);
        }
        
        private System.IAsyncResult OnBeginExecuteJob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginExecuteJob(callback, asyncState);
        }
        
        private object[] OnEndExecuteJob(System.IAsyncResult result) {
            string retVal = this.EndExecuteJob(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExecuteJobCompleted(object state) {
            if ((this.ExecuteJobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteJobCompleted(this, new ExecuteJobCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteJobAsync() {
            this.ExecuteJobAsync(null);
        }
        
        public void ExecuteJobAsync(object userState) {
            if ((this.onBeginExecuteJobDelegate == null)) {
                this.onBeginExecuteJobDelegate = new BeginOperationDelegate(this.OnBeginExecuteJob);
            }
            if ((this.onEndExecuteJobDelegate == null)) {
                this.onEndExecuteJobDelegate = new EndOperationDelegate(this.OnEndExecuteJob);
            }
            if ((this.onExecuteJobCompletedDelegate == null)) {
                this.onExecuteJobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteJobCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteJobDelegate, null, this.onEndExecuteJobDelegate, this.onExecuteJobCompletedDelegate, userState);
        }
        
        public string ClearJob() {
            return base.Channel.ClearJob();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearJob(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearJob(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndClearJob(System.IAsyncResult result) {
            return base.Channel.EndClearJob(result);
        }
        
        private System.IAsyncResult OnBeginClearJob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginClearJob(callback, asyncState);
        }
        
        private object[] OnEndClearJob(System.IAsyncResult result) {
            string retVal = this.EndClearJob(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearJobCompleted(object state) {
            if ((this.ClearJobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearJobCompleted(this, new ClearJobCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearJobAsync() {
            this.ClearJobAsync(null);
        }
        
        public void ClearJobAsync(object userState) {
            if ((this.onBeginClearJobDelegate == null)) {
                this.onBeginClearJobDelegate = new BeginOperationDelegate(this.OnBeginClearJob);
            }
            if ((this.onEndClearJobDelegate == null)) {
                this.onEndClearJobDelegate = new EndOperationDelegate(this.OnEndClearJob);
            }
            if ((this.onClearJobCompletedDelegate == null)) {
                this.onClearJobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearJobCompleted);
            }
            base.InvokeAsync(this.onBeginClearJobDelegate, null, this.onEndClearJobDelegate, this.onClearJobCompletedDelegate, userState);
        }
        
        public string ConvertToImages(EyeshotWcfClientWinForms.EyeshotServiceRef.viewType[] views, int width, int height, System.Drawing.Color topColor, System.Drawing.Color bottomColor, bool showCsi, bool showOs) {
            return base.Channel.ConvertToImages(views, width, height, topColor, bottomColor, showCsi, showOs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToImages(EyeshotWcfClientWinForms.EyeshotServiceRef.viewType[] views, int width, int height, System.Drawing.Color topColor, System.Drawing.Color bottomColor, bool showCsi, bool showOs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToImages(views, width, height, topColor, bottomColor, showCsi, showOs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToImages(System.IAsyncResult result) {
            return base.Channel.EndConvertToImages(result);
        }
        
        private System.IAsyncResult OnBeginConvertToImages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EyeshotWcfClientWinForms.EyeshotServiceRef.viewType[] views = ((EyeshotWcfClientWinForms.EyeshotServiceRef.viewType[])(inValues[0]));
            int width = ((int)(inValues[1]));
            int height = ((int)(inValues[2]));
            System.Drawing.Color topColor = ((System.Drawing.Color)(inValues[3]));
            System.Drawing.Color bottomColor = ((System.Drawing.Color)(inValues[4]));
            bool showCsi = ((bool)(inValues[5]));
            bool showOs = ((bool)(inValues[6]));
            return this.BeginConvertToImages(views, width, height, topColor, bottomColor, showCsi, showOs, callback, asyncState);
        }
        
        private object[] OnEndConvertToImages(System.IAsyncResult result) {
            string retVal = this.EndConvertToImages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToImagesCompleted(object state) {
            if ((this.ConvertToImagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToImagesCompleted(this, new ConvertToImagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToImagesAsync(EyeshotWcfClientWinForms.EyeshotServiceRef.viewType[] views, int width, int height, System.Drawing.Color topColor, System.Drawing.Color bottomColor, bool showCsi, bool showOs) {
            this.ConvertToImagesAsync(views, width, height, topColor, bottomColor, showCsi, showOs, null);
        }
        
        public void ConvertToImagesAsync(EyeshotWcfClientWinForms.EyeshotServiceRef.viewType[] views, int width, int height, System.Drawing.Color topColor, System.Drawing.Color bottomColor, bool showCsi, bool showOs, object userState) {
            if ((this.onBeginConvertToImagesDelegate == null)) {
                this.onBeginConvertToImagesDelegate = new BeginOperationDelegate(this.OnBeginConvertToImages);
            }
            if ((this.onEndConvertToImagesDelegate == null)) {
                this.onEndConvertToImagesDelegate = new EndOperationDelegate(this.OnEndConvertToImages);
            }
            if ((this.onConvertToImagesCompletedDelegate == null)) {
                this.onConvertToImagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToImagesCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToImagesDelegate, new object[] {
                        views,
                        width,
                        height,
                        topColor,
                        bottomColor,
                        showCsi,
                        showOs}, this.onEndConvertToImagesDelegate, this.onConvertToImagesCompletedDelegate, userState);
        }
        
        public string ConvertToXml() {
            return base.Channel.ConvertToXml();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToXml(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToXml(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToXml(System.IAsyncResult result) {
            return base.Channel.EndConvertToXml(result);
        }
        
        private System.IAsyncResult OnBeginConvertToXml(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginConvertToXml(callback, asyncState);
        }
        
        private object[] OnEndConvertToXml(System.IAsyncResult result) {
            string retVal = this.EndConvertToXml(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToXmlCompleted(object state) {
            if ((this.ConvertToXmlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToXmlCompleted(this, new ConvertToXmlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToXmlAsync() {
            this.ConvertToXmlAsync(null);
        }
        
        public void ConvertToXmlAsync(object userState) {
            if ((this.onBeginConvertToXmlDelegate == null)) {
                this.onBeginConvertToXmlDelegate = new BeginOperationDelegate(this.OnBeginConvertToXml);
            }
            if ((this.onEndConvertToXmlDelegate == null)) {
                this.onEndConvertToXmlDelegate = new EndOperationDelegate(this.OnEndConvertToXml);
            }
            if ((this.onConvertToXmlCompletedDelegate == null)) {
                this.onConvertToXmlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToXmlCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToXmlDelegate, null, this.onEndConvertToXmlDelegate, this.onConvertToXmlCompletedDelegate, userState);
        }
        
        public string ConvertToWebGL(double tolerance, System.Nullable<System.Drawing.Color> htmlBodyColor) {
            return base.Channel.ConvertToWebGL(tolerance, htmlBodyColor);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToWebGL(double tolerance, System.Nullable<System.Drawing.Color> htmlBodyColor, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToWebGL(tolerance, htmlBodyColor, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToWebGL(System.IAsyncResult result) {
            return base.Channel.EndConvertToWebGL(result);
        }
        
        private System.IAsyncResult OnBeginConvertToWebGL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double tolerance = ((double)(inValues[0]));
            System.Nullable<System.Drawing.Color> htmlBodyColor = ((System.Nullable<System.Drawing.Color>)(inValues[1]));
            return this.BeginConvertToWebGL(tolerance, htmlBodyColor, callback, asyncState);
        }
        
        private object[] OnEndConvertToWebGL(System.IAsyncResult result) {
            string retVal = this.EndConvertToWebGL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToWebGLCompleted(object state) {
            if ((this.ConvertToWebGLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToWebGLCompleted(this, new ConvertToWebGLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToWebGLAsync(double tolerance, System.Nullable<System.Drawing.Color> htmlBodyColor) {
            this.ConvertToWebGLAsync(tolerance, htmlBodyColor, null);
        }
        
        public void ConvertToWebGLAsync(double tolerance, System.Nullable<System.Drawing.Color> htmlBodyColor, object userState) {
            if ((this.onBeginConvertToWebGLDelegate == null)) {
                this.onBeginConvertToWebGLDelegate = new BeginOperationDelegate(this.OnBeginConvertToWebGL);
            }
            if ((this.onEndConvertToWebGLDelegate == null)) {
                this.onEndConvertToWebGLDelegate = new EndOperationDelegate(this.OnEndConvertToWebGL);
            }
            if ((this.onConvertToWebGLCompletedDelegate == null)) {
                this.onConvertToWebGLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToWebGLCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToWebGLDelegate, new object[] {
                        tolerance,
                        htmlBodyColor}, this.onEndConvertToWebGLDelegate, this.onConvertToWebGLCompletedDelegate, userState);
        }
        
        public string ConvertToDwg(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance) {
            return base.Channel.ConvertToDwg(versionTypes, aciColors, tolerance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToDwg(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToDwg(versionTypes, aciColors, tolerance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToDwg(System.IAsyncResult result) {
            return base.Channel.EndConvertToDwg(result);
        }
        
        private System.IAsyncResult OnBeginConvertToDwg(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes = ((EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[])(inValues[0]));
            bool aciColors = ((bool)(inValues[1]));
            double tolerance = ((double)(inValues[2]));
            return this.BeginConvertToDwg(versionTypes, aciColors, tolerance, callback, asyncState);
        }
        
        private object[] OnEndConvertToDwg(System.IAsyncResult result) {
            string retVal = this.EndConvertToDwg(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToDwgCompleted(object state) {
            if ((this.ConvertToDwgCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToDwgCompleted(this, new ConvertToDwgCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToDwgAsync(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance) {
            this.ConvertToDwgAsync(versionTypes, aciColors, tolerance, null);
        }
        
        public void ConvertToDwgAsync(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance, object userState) {
            if ((this.onBeginConvertToDwgDelegate == null)) {
                this.onBeginConvertToDwgDelegate = new BeginOperationDelegate(this.OnBeginConvertToDwg);
            }
            if ((this.onEndConvertToDwgDelegate == null)) {
                this.onEndConvertToDwgDelegate = new EndOperationDelegate(this.OnEndConvertToDwg);
            }
            if ((this.onConvertToDwgCompletedDelegate == null)) {
                this.onConvertToDwgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToDwgCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToDwgDelegate, new object[] {
                        versionTypes,
                        aciColors,
                        tolerance}, this.onEndConvertToDwgDelegate, this.onConvertToDwgCompletedDelegate, userState);
        }
        
        public string ConvertToDxf(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance) {
            return base.Channel.ConvertToDxf(versionTypes, aciColors, tolerance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToDxf(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToDxf(versionTypes, aciColors, tolerance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToDxf(System.IAsyncResult result) {
            return base.Channel.EndConvertToDxf(result);
        }
        
        private System.IAsyncResult OnBeginConvertToDxf(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes = ((EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[])(inValues[0]));
            bool aciColors = ((bool)(inValues[1]));
            double tolerance = ((double)(inValues[2]));
            return this.BeginConvertToDxf(versionTypes, aciColors, tolerance, callback, asyncState);
        }
        
        private object[] OnEndConvertToDxf(System.IAsyncResult result) {
            string retVal = this.EndConvertToDxf(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToDxfCompleted(object state) {
            if ((this.ConvertToDxfCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToDxfCompleted(this, new ConvertToDxfCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToDxfAsync(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance) {
            this.ConvertToDxfAsync(versionTypes, aciColors, tolerance, null);
        }
        
        public void ConvertToDxfAsync(EyeshotWcfClientWinForms.EyeshotServiceRef.WriteAutodeskversionType[] versionTypes, bool aciColors, double tolerance, object userState) {
            if ((this.onBeginConvertToDxfDelegate == null)) {
                this.onBeginConvertToDxfDelegate = new BeginOperationDelegate(this.OnBeginConvertToDxf);
            }
            if ((this.onEndConvertToDxfDelegate == null)) {
                this.onEndConvertToDxfDelegate = new EndOperationDelegate(this.OnEndConvertToDxf);
            }
            if ((this.onConvertToDxfCompletedDelegate == null)) {
                this.onConvertToDxfCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToDxfCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToDxfDelegate, new object[] {
                        versionTypes,
                        aciColors,
                        tolerance}, this.onEndConvertToDxfDelegate, this.onConvertToDxfCompletedDelegate, userState);
        }
        
        public string ConvertTo3DPdf() {
            return base.Channel.ConvertTo3DPdf();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertTo3DPdf(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertTo3DPdf(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertTo3DPdf(System.IAsyncResult result) {
            return base.Channel.EndConvertTo3DPdf(result);
        }
        
        private System.IAsyncResult OnBeginConvertTo3DPdf(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginConvertTo3DPdf(callback, asyncState);
        }
        
        private object[] OnEndConvertTo3DPdf(System.IAsyncResult result) {
            string retVal = this.EndConvertTo3DPdf(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertTo3DPdfCompleted(object state) {
            if ((this.ConvertTo3DPdfCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertTo3DPdfCompleted(this, new ConvertTo3DPdfCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertTo3DPdfAsync() {
            this.ConvertTo3DPdfAsync(null);
        }
        
        public void ConvertTo3DPdfAsync(object userState) {
            if ((this.onBeginConvertTo3DPdfDelegate == null)) {
                this.onBeginConvertTo3DPdfDelegate = new BeginOperationDelegate(this.OnBeginConvertTo3DPdf);
            }
            if ((this.onEndConvertTo3DPdfDelegate == null)) {
                this.onEndConvertTo3DPdfDelegate = new EndOperationDelegate(this.OnEndConvertTo3DPdf);
            }
            if ((this.onConvertTo3DPdfCompletedDelegate == null)) {
                this.onConvertTo3DPdfCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertTo3DPdfCompleted);
            }
            base.InvokeAsync(this.onBeginConvertTo3DPdfDelegate, null, this.onEndConvertTo3DPdfDelegate, this.onConvertTo3DPdfCompletedDelegate, userState);
        }
        
        public string ConvertToObj(double tolerance) {
            return base.Channel.ConvertToObj(tolerance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToObj(double tolerance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToObj(tolerance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToObj(System.IAsyncResult result) {
            return base.Channel.EndConvertToObj(result);
        }
        
        private System.IAsyncResult OnBeginConvertToObj(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double tolerance = ((double)(inValues[0]));
            return this.BeginConvertToObj(tolerance, callback, asyncState);
        }
        
        private object[] OnEndConvertToObj(System.IAsyncResult result) {
            string retVal = this.EndConvertToObj(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToObjCompleted(object state) {
            if ((this.ConvertToObjCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToObjCompleted(this, new ConvertToObjCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToObjAsync(double tolerance) {
            this.ConvertToObjAsync(tolerance, null);
        }
        
        public void ConvertToObjAsync(double tolerance, object userState) {
            if ((this.onBeginConvertToObjDelegate == null)) {
                this.onBeginConvertToObjDelegate = new BeginOperationDelegate(this.OnBeginConvertToObj);
            }
            if ((this.onEndConvertToObjDelegate == null)) {
                this.onEndConvertToObjDelegate = new EndOperationDelegate(this.OnEndConvertToObj);
            }
            if ((this.onConvertToObjCompletedDelegate == null)) {
                this.onConvertToObjCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToObjCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToObjDelegate, new object[] {
                        tolerance}, this.onEndConvertToObjDelegate, this.onConvertToObjCompletedDelegate, userState);
        }
        
        public string ConvertToIges() {
            return base.Channel.ConvertToIges();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToIges(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToIges(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToIges(System.IAsyncResult result) {
            return base.Channel.EndConvertToIges(result);
        }
        
        private System.IAsyncResult OnBeginConvertToIges(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginConvertToIges(callback, asyncState);
        }
        
        private object[] OnEndConvertToIges(System.IAsyncResult result) {
            string retVal = this.EndConvertToIges(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToIgesCompleted(object state) {
            if ((this.ConvertToIgesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToIgesCompleted(this, new ConvertToIgesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToIgesAsync() {
            this.ConvertToIgesAsync(null);
        }
        
        public void ConvertToIgesAsync(object userState) {
            if ((this.onBeginConvertToIgesDelegate == null)) {
                this.onBeginConvertToIgesDelegate = new BeginOperationDelegate(this.OnBeginConvertToIges);
            }
            if ((this.onEndConvertToIgesDelegate == null)) {
                this.onEndConvertToIgesDelegate = new EndOperationDelegate(this.OnEndConvertToIges);
            }
            if ((this.onConvertToIgesCompletedDelegate == null)) {
                this.onConvertToIgesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToIgesCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToIgesDelegate, null, this.onEndConvertToIgesDelegate, this.onConvertToIgesCompletedDelegate, userState);
        }
        
        public string ConvertToStep() {
            return base.Channel.ConvertToStep();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToStep(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToStep(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToStep(System.IAsyncResult result) {
            return base.Channel.EndConvertToStep(result);
        }
        
        private System.IAsyncResult OnBeginConvertToStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginConvertToStep(callback, asyncState);
        }
        
        private object[] OnEndConvertToStep(System.IAsyncResult result) {
            string retVal = this.EndConvertToStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToStepCompleted(object state) {
            if ((this.ConvertToStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToStepCompleted(this, new ConvertToStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToStepAsync() {
            this.ConvertToStepAsync(null);
        }
        
        public void ConvertToStepAsync(object userState) {
            if ((this.onBeginConvertToStepDelegate == null)) {
                this.onBeginConvertToStepDelegate = new BeginOperationDelegate(this.OnBeginConvertToStep);
            }
            if ((this.onEndConvertToStepDelegate == null)) {
                this.onEndConvertToStepDelegate = new EndOperationDelegate(this.OnEndConvertToStep);
            }
            if ((this.onConvertToStepCompletedDelegate == null)) {
                this.onConvertToStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToStepCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToStepDelegate, null, this.onEndConvertToStepDelegate, this.onConvertToStepCompletedDelegate, userState);
        }
        
        public string ConvertToStl(double tolerance) {
            return base.Channel.ConvertToStl(tolerance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertToStl(double tolerance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertToStl(tolerance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndConvertToStl(System.IAsyncResult result) {
            return base.Channel.EndConvertToStl(result);
        }
        
        private System.IAsyncResult OnBeginConvertToStl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double tolerance = ((double)(inValues[0]));
            return this.BeginConvertToStl(tolerance, callback, asyncState);
        }
        
        private object[] OnEndConvertToStl(System.IAsyncResult result) {
            string retVal = this.EndConvertToStl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertToStlCompleted(object state) {
            if ((this.ConvertToStlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertToStlCompleted(this, new ConvertToStlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertToStlAsync(double tolerance) {
            this.ConvertToStlAsync(tolerance, null);
        }
        
        public void ConvertToStlAsync(double tolerance, object userState) {
            if ((this.onBeginConvertToStlDelegate == null)) {
                this.onBeginConvertToStlDelegate = new BeginOperationDelegate(this.OnBeginConvertToStl);
            }
            if ((this.onEndConvertToStlDelegate == null)) {
                this.onEndConvertToStlDelegate = new EndOperationDelegate(this.OnEndConvertToStl);
            }
            if ((this.onConvertToStlCompletedDelegate == null)) {
                this.onConvertToStlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertToStlCompleted);
            }
            base.InvokeAsync(this.onBeginConvertToStlDelegate, new object[] {
                        tolerance}, this.onEndConvertToStlDelegate, this.onConvertToStlCompletedDelegate, userState);
        }
        
        public string GetArea(double tolerance) {
            return base.Channel.GetArea(tolerance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetArea(double tolerance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetArea(tolerance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetArea(System.IAsyncResult result) {
            return base.Channel.EndGetArea(result);
        }
        
        private System.IAsyncResult OnBeginGetArea(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double tolerance = ((double)(inValues[0]));
            return this.BeginGetArea(tolerance, callback, asyncState);
        }
        
        private object[] OnEndGetArea(System.IAsyncResult result) {
            string retVal = this.EndGetArea(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAreaCompleted(object state) {
            if ((this.GetAreaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAreaCompleted(this, new GetAreaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAreaAsync(double tolerance) {
            this.GetAreaAsync(tolerance, null);
        }
        
        public void GetAreaAsync(double tolerance, object userState) {
            if ((this.onBeginGetAreaDelegate == null)) {
                this.onBeginGetAreaDelegate = new BeginOperationDelegate(this.OnBeginGetArea);
            }
            if ((this.onEndGetAreaDelegate == null)) {
                this.onEndGetAreaDelegate = new EndOperationDelegate(this.OnEndGetArea);
            }
            if ((this.onGetAreaCompletedDelegate == null)) {
                this.onGetAreaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAreaCompleted);
            }
            base.InvokeAsync(this.onBeginGetAreaDelegate, new object[] {
                        tolerance}, this.onEndGetAreaDelegate, this.onGetAreaCompletedDelegate, userState);
        }
        
        public string GetVolume(double tolerance) {
            return base.Channel.GetVolume(tolerance);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetVolume(double tolerance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVolume(tolerance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetVolume(System.IAsyncResult result) {
            return base.Channel.EndGetVolume(result);
        }
        
        private System.IAsyncResult OnBeginGetVolume(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double tolerance = ((double)(inValues[0]));
            return this.BeginGetVolume(tolerance, callback, asyncState);
        }
        
        private object[] OnEndGetVolume(System.IAsyncResult result) {
            string retVal = this.EndGetVolume(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVolumeCompleted(object state) {
            if ((this.GetVolumeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVolumeCompleted(this, new GetVolumeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVolumeAsync(double tolerance) {
            this.GetVolumeAsync(tolerance, null);
        }
        
        public void GetVolumeAsync(double tolerance, object userState) {
            if ((this.onBeginGetVolumeDelegate == null)) {
                this.onBeginGetVolumeDelegate = new BeginOperationDelegate(this.OnBeginGetVolume);
            }
            if ((this.onEndGetVolumeDelegate == null)) {
                this.onEndGetVolumeDelegate = new EndOperationDelegate(this.OnEndGetVolume);
            }
            if ((this.onGetVolumeCompletedDelegate == null)) {
                this.onGetVolumeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVolumeCompleted);
            }
            base.InvokeAsync(this.onBeginGetVolumeDelegate, new object[] {
                        tolerance}, this.onEndGetVolumeDelegate, this.onGetVolumeCompletedDelegate, userState);
        }
        
        public string GetFullOperationsLog() {
            return base.Channel.GetFullOperationsLog();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFullOperationsLog(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFullOperationsLog(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetFullOperationsLog(System.IAsyncResult result) {
            return base.Channel.EndGetFullOperationsLog(result);
        }
        
        private System.IAsyncResult OnBeginGetFullOperationsLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetFullOperationsLog(callback, asyncState);
        }
        
        private object[] OnEndGetFullOperationsLog(System.IAsyncResult result) {
            string retVal = this.EndGetFullOperationsLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFullOperationsLogCompleted(object state) {
            if ((this.GetFullOperationsLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFullOperationsLogCompleted(this, new GetFullOperationsLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFullOperationsLogAsync() {
            this.GetFullOperationsLogAsync(null);
        }
        
        public void GetFullOperationsLogAsync(object userState) {
            if ((this.onBeginGetFullOperationsLogDelegate == null)) {
                this.onBeginGetFullOperationsLogDelegate = new BeginOperationDelegate(this.OnBeginGetFullOperationsLog);
            }
            if ((this.onEndGetFullOperationsLogDelegate == null)) {
                this.onEndGetFullOperationsLogDelegate = new EndOperationDelegate(this.OnEndGetFullOperationsLog);
            }
            if ((this.onGetFullOperationsLogCompletedDelegate == null)) {
                this.onGetFullOperationsLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFullOperationsLogCompleted);
            }
            base.InvokeAsync(this.onBeginGetFullOperationsLogDelegate, null, this.onEndGetFullOperationsLogDelegate, this.onGetFullOperationsLogCompletedDelegate, userState);
        }
        
        public string AddRotation(double angleInRadians, double vectorX, double vectorY, double vectorZ, double centerX, double centerY, double centerZ) {
            return base.Channel.AddRotation(angleInRadians, vectorX, vectorY, vectorZ, centerX, centerY, centerZ);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddRotation(double angleInRadians, double vectorX, double vectorY, double vectorZ, double centerX, double centerY, double centerZ, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRotation(angleInRadians, vectorX, vectorY, vectorZ, centerX, centerY, centerZ, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndAddRotation(System.IAsyncResult result) {
            return base.Channel.EndAddRotation(result);
        }
        
        private System.IAsyncResult OnBeginAddRotation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double angleInRadians = ((double)(inValues[0]));
            double vectorX = ((double)(inValues[1]));
            double vectorY = ((double)(inValues[2]));
            double vectorZ = ((double)(inValues[3]));
            double centerX = ((double)(inValues[4]));
            double centerY = ((double)(inValues[5]));
            double centerZ = ((double)(inValues[6]));
            return this.BeginAddRotation(angleInRadians, vectorX, vectorY, vectorZ, centerX, centerY, centerZ, callback, asyncState);
        }
        
        private object[] OnEndAddRotation(System.IAsyncResult result) {
            string retVal = this.EndAddRotation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddRotationCompleted(object state) {
            if ((this.AddRotationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRotationCompleted(this, new AddRotationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRotationAsync(double angleInRadians, double vectorX, double vectorY, double vectorZ, double centerX, double centerY, double centerZ) {
            this.AddRotationAsync(angleInRadians, vectorX, vectorY, vectorZ, centerX, centerY, centerZ, null);
        }
        
        public void AddRotationAsync(double angleInRadians, double vectorX, double vectorY, double vectorZ, double centerX, double centerY, double centerZ, object userState) {
            if ((this.onBeginAddRotationDelegate == null)) {
                this.onBeginAddRotationDelegate = new BeginOperationDelegate(this.OnBeginAddRotation);
            }
            if ((this.onEndAddRotationDelegate == null)) {
                this.onEndAddRotationDelegate = new EndOperationDelegate(this.OnEndAddRotation);
            }
            if ((this.onAddRotationCompletedDelegate == null)) {
                this.onAddRotationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRotationCompleted);
            }
            base.InvokeAsync(this.onBeginAddRotationDelegate, new object[] {
                        angleInRadians,
                        vectorX,
                        vectorY,
                        vectorZ,
                        centerX,
                        centerY,
                        centerZ}, this.onEndAddRotationDelegate, this.onAddRotationCompletedDelegate, userState);
        }
        
        public string AddTranslation(double x, double y, double z) {
            return base.Channel.AddTranslation(x, y, z);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTranslation(double x, double y, double z, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTranslation(x, y, z, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndAddTranslation(System.IAsyncResult result) {
            return base.Channel.EndAddTranslation(result);
        }
        
        private System.IAsyncResult OnBeginAddTranslation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double x = ((double)(inValues[0]));
            double y = ((double)(inValues[1]));
            double z = ((double)(inValues[2]));
            return this.BeginAddTranslation(x, y, z, callback, asyncState);
        }
        
        private object[] OnEndAddTranslation(System.IAsyncResult result) {
            string retVal = this.EndAddTranslation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTranslationCompleted(object state) {
            if ((this.AddTranslationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTranslationCompleted(this, new AddTranslationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTranslationAsync(double x, double y, double z) {
            this.AddTranslationAsync(x, y, z, null);
        }
        
        public void AddTranslationAsync(double x, double y, double z, object userState) {
            if ((this.onBeginAddTranslationDelegate == null)) {
                this.onBeginAddTranslationDelegate = new BeginOperationDelegate(this.OnBeginAddTranslation);
            }
            if ((this.onEndAddTranslationDelegate == null)) {
                this.onEndAddTranslationDelegate = new EndOperationDelegate(this.OnEndAddTranslation);
            }
            if ((this.onAddTranslationCompletedDelegate == null)) {
                this.onAddTranslationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTranslationCompleted);
            }
            base.InvokeAsync(this.onBeginAddTranslationDelegate, new object[] {
                        x,
                        y,
                        z}, this.onEndAddTranslationDelegate, this.onAddTranslationCompletedDelegate, userState);
        }
        
        public string AddScaling(double x, double y, double z) {
            return base.Channel.AddScaling(x, y, z);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddScaling(double x, double y, double z, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddScaling(x, y, z, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndAddScaling(System.IAsyncResult result) {
            return base.Channel.EndAddScaling(result);
        }
        
        private System.IAsyncResult OnBeginAddScaling(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double x = ((double)(inValues[0]));
            double y = ((double)(inValues[1]));
            double z = ((double)(inValues[2]));
            return this.BeginAddScaling(x, y, z, callback, asyncState);
        }
        
        private object[] OnEndAddScaling(System.IAsyncResult result) {
            string retVal = this.EndAddScaling(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddScalingCompleted(object state) {
            if ((this.AddScalingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddScalingCompleted(this, new AddScalingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddScalingAsync(double x, double y, double z) {
            this.AddScalingAsync(x, y, z, null);
        }
        
        public void AddScalingAsync(double x, double y, double z, object userState) {
            if ((this.onBeginAddScalingDelegate == null)) {
                this.onBeginAddScalingDelegate = new BeginOperationDelegate(this.OnBeginAddScaling);
            }
            if ((this.onEndAddScalingDelegate == null)) {
                this.onEndAddScalingDelegate = new EndOperationDelegate(this.OnEndAddScaling);
            }
            if ((this.onAddScalingCompletedDelegate == null)) {
                this.onAddScalingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddScalingCompleted);
            }
            base.InvokeAsync(this.onBeginAddScalingDelegate, new object[] {
                        x,
                        y,
                        z}, this.onEndAddScalingDelegate, this.onAddScalingCompletedDelegate, userState);
        }
    }
}
